require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function setupFinalDatabase() {
  console.log('üöÄ CONFIGURA√á√ÉO FINAL DO BANCO DE DADOS')
  console.log('=' .repeat(50))
  
  try {
    // 1. Verificar estrutura das tabelas
    console.log('\n1Ô∏è‚É£ Verificando estrutura das tabelas...')
    
    const tables = ['profiles', 'categories', 'transactions', 'bills', 'budgets']
    
    for (const table of tables) {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1)
      
      if (error) {
        console.log(`‚ùå Tabela ${table}: ${error.message}`)
      } else {
        console.log(`‚úÖ Tabela ${table}: OK`)
      }
    }

    // 2. Criar categorias padr√£o se n√£o existirem
    console.log('\n2Ô∏è‚É£ Criando categorias padr√£o...')
    
    const coupleId = 'f8d94732-a7d3-44c7-842e-58aaa9a58d4c'
    
    const { data: existingCategories } = await supabase
      .from('categories')
      .select('*')
      .eq('couple_id', coupleId)
    
    if (!existingCategories || existingCategories.length === 0) {
      const defaultCategories = [
        { name: 'Alimenta√ß√£o', color: '#10B981', type: 'EXPENSE', couple_id: coupleId },
        { name: 'Transporte', color: '#3B82F6', type: 'EXPENSE', couple_id: coupleId },
        { name: 'Moradia', color: '#8B5CF6', type: 'EXPENSE', couple_id: coupleId },
        { name: 'Sa√∫de', color: '#EF4444', type: 'EXPENSE', couple_id: coupleId },
        { name: 'Educa√ß√£o', color: '#F59E0B', type: 'EXPENSE', couple_id: coupleId },
        { name: 'Lazer', color: '#EC4899', type: 'EXPENSE', couple_id: coupleId },
        { name: 'Sal√°rio', color: '#059669', type: 'INCOME', couple_id: coupleId },
        { name: 'Freelance', color: '#0D9488', type: 'INCOME', couple_id: coupleId },
        { name: 'Investimentos', color: '#7C3AED', type: 'INCOME', couple_id: coupleId },
      ]
      
      const { error: categoryError } = await supabase
        .from('categories')
        .insert(defaultCategories)
      
      if (categoryError) {
        console.log('‚ùå Erro ao criar categorias:', categoryError.message)
      } else {
        console.log(`‚úÖ ${defaultCategories.length} categorias padr√£o criadas`)
      }
    } else {
      console.log(`‚úÖ ${existingCategories.length} categorias j√° existem`)
    }

    // 3. Verificar RLS (Row Level Security)
    console.log('\n3Ô∏è‚É£ Verificando pol√≠ticas de seguran√ßa...')
    
    // Esta verifica√ß√£o √© mais complexa e normalmente feita via SQL
    console.log('‚ÑπÔ∏è  Verifique se as pol√≠ticas RLS est√£o ativas no Supabase Dashboard')

    // 4. Criar dados de exemplo (opcional)
    console.log('\n4Ô∏è‚É£ Verificando dados de exemplo...')
    
    const { data: transactions } = await supabase
      .from('transactions')
      .select('*')
      .eq('couple_id', coupleId)
      .limit(1)
    
    if (!transactions || transactions.length === 0) {
      console.log('‚ÑπÔ∏è  Nenhuma transa√ß√£o encontrada')
      console.log('üí° Voc√™ pode adicionar transa√ß√µes atrav√©s da interface')
    } else {
      console.log(`‚úÖ ${transactions.length} transa√ß√µes encontradas`)
    }

    console.log('\nüéâ CONFIGURA√á√ÉO CONCLU√çDA!')
    console.log('‚úÖ Banco de dados pronto para uso')
    console.log('üîó Acesse: http://localhost:3000')

  } catch (error) {
    console.error('‚ùå Erro na configura√ß√£o:', error)
  }
}

setupFinalDatabase().catch(console.error)
