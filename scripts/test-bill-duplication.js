const { createClient } = require('@supabase/supabase-js')

// Configura√ß√£o do Supabase (substitua pelas suas credenciais)
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://your-project.supabase.co'
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'your-anon-key'

if (supabaseUrl.includes('your-project') || supabaseKey.includes('your-anon-key')) {
  console.log('‚ö†Ô∏è  Executando teste offline (sem conex√£o com banco)')
  testBillDuplicationOffline()
  return
}

const supabase = createClient(supabaseUrl, supabaseKey)

// Fun√ß√£o corrigida de formata√ß√£o de data
function formatDateInput(date) {
  if (typeof date === 'string') {
    if (date.match(/^\d{4}-\d{2}-\d{2}$/)) {
      return date
    }
    const d = new Date(date + 'T12:00:00')
    const year = d.getFullYear()
    const month = String(d.getMonth() + 1).padStart(2, '0')
    const day = String(d.getDate()).padStart(2, '0')
    return `${year}-${month}-${day}`
  } else {
    const utcDate = new Date(date.getTime() + (date.getTimezoneOffset() * 60000))
    const year = utcDate.getUTCFullYear()
    const month = String(utcDate.getUTCMonth() + 1).padStart(2, '0')
    const day = String(utcDate.getUTCDate()).padStart(2, '0')
    return `${year}-${month}-${day}`
  }
}

async function testBillDuplication() {
  console.log('üß™ TESTE DE DUPLICA√á√ÉO DE CONTAS')
  console.log('=' .repeat(50))
  
  try {
    // Buscar uma conta existente para duplicar
    const { data: bills, error } = await supabase
      .from('bills')
      .select('*')
      .limit(1)
      .order('created_at', { ascending: false })
    
    if (error) {
      console.log('‚ùå Erro ao buscar contas:', error.message)
      return
    }
    
    if (!bills || bills.length === 0) {
      console.log('üìù Nenhuma conta encontrada para duplicar')
      console.log('üí° Crie uma conta primeiro na aplica√ß√£o')
      return
    }
    
    const originalBill = bills[0]
    console.log('üìã CONTA ORIGINAL:')
    console.log(`‚Ä¢ T√≠tulo: ${originalBill.title}`)
    console.log(`‚Ä¢ Valor: R$ ${originalBill.amount}`)
    console.log(`‚Ä¢ Vencimento: ${originalBill.due_date}`)
    console.log(`‚Ä¢ Status: ${originalBill.status}`)
    
    // Calcular nova data de vencimento (pr√≥ximo m√™s)
    const originalDate = new Date(originalBill.due_date + 'T12:00:00')
    const nextMonth = new Date(originalDate)
    nextMonth.setMonth(nextMonth.getMonth() + 1)
    const newDueDate = formatDateInput(nextMonth)
    
    console.log(`\nüìÖ NOVA DATA DE VENCIMENTO: ${newDueDate}`)
    
    // Simular duplica√ß√£o (estrutura corrigida)
    const duplicateData = {
      title: originalBill.title,
      amount: originalBill.amount,
      due_date: newDueDate,
      category_id: originalBill.category_id,
      status: 'PENDING',
      user_id: originalBill.user_id,
      couple_id: originalBill.couple_id,
      notes: originalBill.notes,
    }
    
    console.log('\n‚úÖ ESTRUTURA DE DUPLICA√á√ÉO CORRIGIDA:')
    console.log('‚Ä¢ Campo "title" (obrigat√≥rio): ‚úÖ')
    console.log('‚Ä¢ Campo "amount": ‚úÖ')
    console.log('‚Ä¢ Campo "due_date" formatado: ‚úÖ')
    console.log('‚Ä¢ Campo "category_id": ‚úÖ')
    console.log('‚Ä¢ Campo "status" definido como PENDING: ‚úÖ')
    console.log('‚Ä¢ Campo "user_id": ‚úÖ')
    console.log('‚Ä¢ Campo "couple_id": ‚úÖ')
    console.log('‚Ä¢ Campo "notes": ‚úÖ')
    
    console.log('\nüîß CORRE√á√ïES APLICADAS:')
    console.log('‚Ä¢ Substitu√≠do "description" por "title"')
    console.log('‚Ä¢ Adicionado campo "notes" na duplica√ß√£o')
    console.log('‚Ä¢ Corrigida formata√ß√£o de data com formatDateInput')
    console.log('‚Ä¢ Status sempre definido como "PENDING" para nova conta')
    
    console.log('\nüéØ AGORA A DUPLICA√á√ÉO DEVE FUNCIONAR!')
    console.log('Teste na aplica√ß√£o: clique em "Duplicar" em uma conta existente')
    
  } catch (err) {
    console.log('‚ùå Erro:', err.message)
  }
}

testBillDuplication()
functi
on testBillDuplicationOffline() {
  console.log('üß™ TESTE DE DUPLICA√á√ÉO DE CONTAS (OFFLINE)')
  console.log('=' .repeat(50))
  
  // Simular uma conta existente
  const originalBill = {
    id: 'test-id',
    title: 'Cart√£o de Cr√©dito',
    amount: 1200.50,
    due_date: '2025-08-15',
    status: 'PENDING',
    category_id: 'cat-1',
    user_id: 'user-1',
    couple_id: 'couple-1',
    notes: 'Fatura do cart√£o principal'
  }
  
  console.log('üìã CONTA ORIGINAL:')
  console.log(`‚Ä¢ T√≠tulo: ${originalBill.title}`)
  console.log(`‚Ä¢ Valor: R$ ${originalBill.amount}`)
  console.log(`‚Ä¢ Vencimento: ${originalBill.due_date}`)
  console.log(`‚Ä¢ Status: ${originalBill.status}`)
  
  // Calcular nova data de vencimento (pr√≥ximo m√™s)
  const originalDate = new Date(originalBill.due_date + 'T12:00:00')
  const nextMonth = new Date(originalDate)
  nextMonth.setMonth(nextMonth.getMonth() + 1)
  const newDueDate = formatDateInput(nextMonth)
  
  console.log(`\nüìÖ NOVA DATA DE VENCIMENTO: ${newDueDate}`)
  
  // Estrutura de duplica√ß√£o corrigida
  const duplicateData = {
    title: originalBill.title,
    amount: originalBill.amount,
    due_date: newDueDate,
    category_id: originalBill.category_id,
    status: 'PENDING',
    user_id: originalBill.user_id,
    couple_id: originalBill.couple_id,
    notes: originalBill.notes,
  }
  
  console.log('\n‚úÖ ESTRUTURA DE DUPLICA√á√ÉO CORRIGIDA:')
  console.log('‚Ä¢ Campo "title" (obrigat√≥rio): ‚úÖ')
  console.log('‚Ä¢ Campo "amount": ‚úÖ')
  console.log('‚Ä¢ Campo "due_date" formatado: ‚úÖ')
  console.log('‚Ä¢ Campo "category_id": ‚úÖ')
  console.log('‚Ä¢ Campo "status" definido como PENDING: ‚úÖ')
  console.log('‚Ä¢ Campo "user_id": ‚úÖ')
  console.log('‚Ä¢ Campo "couple_id": ‚úÖ')
  console.log('‚Ä¢ Campo "notes": ‚úÖ')
  
  console.log('\nüîß CORRE√á√ïES APLICADAS:')
  console.log('‚Ä¢ ‚ùå Antes: usava "description" (campo inexistente)')
  console.log('‚Ä¢ ‚úÖ Agora: usa "title" (campo obrigat√≥rio)')
  console.log('‚Ä¢ ‚úÖ Adicionado campo "notes" na duplica√ß√£o')
  console.log('‚Ä¢ ‚úÖ Corrigida formata√ß√£o de data com formatDateInput')
  console.log('‚Ä¢ ‚úÖ Status sempre definido como "PENDING" para nova conta')
  
  console.log('\nüéØ PROBLEMA RESOLVIDO!')
  console.log('O erro "null value in column title" n√£o deve mais ocorrer')
  console.log('Teste na aplica√ß√£o: clique em "Duplicar" em uma conta existente')
}