require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function simpleDashboardTest() {
  console.log('üéØ TESTE SIMPLES DO DASHBOARD')
  console.log('=' .repeat(50))
  
  const coupleId = 'f8d94732-a7d3-44c7-842e-58aaa9a58d4c'
  
  console.log('\n1Ô∏è‚É£ Testando acesso √†s tabelas...')
  
  // Testar acesso a transa√ß√µes
  const { data: transactions, error: transError } = await supabase
    .from('transactions')
    .select('*')
    .eq('couple_id', coupleId)
    .limit(1)
  
  if (transError) {
    console.log('‚ùå Erro ao acessar transactions:', transError.message)
  } else {
    console.log(`‚úÖ Transactions: ${transactions?.length || 0} registros`)
  }
  
  // Testar acesso a bills
  const { data: bills, error: billsError } = await supabase
    .from('bills')
    .select('*')
    .eq('couple_id', coupleId)
    .limit(1)
  
  if (billsError) {
    console.log('‚ùå Erro ao acessar bills:', billsError.message)
  } else {
    console.log(`‚úÖ Bills: ${bills?.length || 0} registros`)
  }
  
  // Testar acesso a categories
  const { data: categories, error: catError } = await supabase
    .from('categories')
    .select('*')
    .eq('couple_id', coupleId)
    .limit(1)
  
  if (catError) {
    console.log('‚ùå Erro ao acessar categories:', catError.message)
  } else {
    console.log(`‚úÖ Categories: ${categories?.length || 0} registros`)
  }
  
  console.log('\n2Ô∏è‚É£ Simulando l√≥gica do dashboard...')
  
  // Se n√£o h√° dados, simular o que deveria acontecer
  if (!bills || bills.length === 0) {
    console.log('\n‚ö†Ô∏è PROBLEMA IDENTIFICADO:')
    console.log('‚Ä¢ N√£o h√° contas no banco de dados')
    console.log('‚Ä¢ Mas a interface mostra 4 contas pendentes')
    console.log('‚Ä¢ Isso indica um problema de sincroniza√ß√£o')
    
    console.log('\nüí° SOLU√á√ïES POSS√çVEIS:')
    console.log('1. Limpar cache do navegador (Ctrl+Shift+R)')
    console.log('2. Verificar se as contas foram realmente salvas')
    console.log('3. Verificar pol√≠ticas RLS no Supabase')
    console.log('4. Recriar as contas atrav√©s da interface')
    
    console.log('\nüîß CORRE√á√ÉO APLICADA:')
    console.log('‚Ä¢ O sistema agora considera TODAS as contas pendentes como despesas')
    console.log('‚Ä¢ N√£o importa a data de vencimento')
    console.log('‚Ä¢ Contas vencidas sempre aparecem nas despesas')
  }
}

simpleDashboardTest().catch(console.error)
