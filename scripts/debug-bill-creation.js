// Simular o fluxo completo de cria√ß√£o de conta

// Fun√ß√£o corrigida de formata√ß√£o de data
function formatDateInput(date) {
  if (typeof date === 'string') {
    if (date.match(/^\d{4}-\d{2}-\d{2}$/)) {
      return date
    }
    const d = new Date(date + 'T12:00:00')
    const year = d.getFullYear()
    const month = String(d.getMonth() + 1).padStart(2, '0')
    const day = String(d.getDate()).padStart(2, '0')
    return `${year}-${month}-${day}`
  } else {
    const utcDate = new Date(date.getTime() + (date.getTimezoneOffset() * 60000))
    const year = utcDate.getUTCFullYear()
    const month = String(utcDate.getUTCMonth() + 1).padStart(2, '0')
    const day = String(utcDate.getUTCDate()).padStart(2, '0')
    return `${year}-${month}-${day}`
  }
}

function debugBillCreation() {
  console.log('üîç DEBUG - FLUXO DE CRIA√á√ÉO DE CONTA')
  console.log('=' .repeat(50))
  
  // Passo 1: Valor padr√£o do formul√°rio (quando abre o modal)
  console.log('üìù PASSO 1 - Valor padr√£o do formul√°rio:')
  const defaultDate = formatDateInput(new Date())
  console.log(`‚Ä¢ Valor padr√£o: ${defaultDate}`)
  console.log(`‚Ä¢ Data atual: ${new Date().toISOString()}`)
  
  // Passo 2: Usu√°rio seleciona uma data espec√≠fica
  console.log('\nüë§ PASSO 2 - Usu√°rio seleciona data:')
  const userSelectedDate = '2025-08-15'
  console.log(`‚Ä¢ Data selecionada: ${userSelectedDate}`)
  
  // Passo 3: Dados do formul√°rio (react-hook-form)
  console.log('\nüìã PASSO 3 - Dados do formul√°rio:')
  const formData = {
    title: 'Nova Conta',
    amount: 150.00,
    due_date: userSelectedDate, // Input type="date" retorna string
    category_id: 'cat-123',
    notes: 'Teste'
  }
  console.log('‚Ä¢ Dados do formul√°rio:', JSON.stringify(formData, null, 2))
  
  // Passo 4: handleCreateBill (p√°gina)
  console.log('\nüîÑ PASSO 4 - handleCreateBill:')
  console.log('‚Ä¢ Dados passados para createBill:', JSON.stringify(formData, null, 2))
  
  // Passo 5: createBill (hook)
  console.log('\n‚öôÔ∏è  PASSO 5 - createBill (hook):')
  const billInsertData = {
    ...formData,
    user_id: 'user-123',
    couple_id: 'couple-123'
  }
  console.log('‚Ä¢ Dados enviados para Supabase:', JSON.stringify(billInsertData, null, 2))
  
  // Passo 6: Verificar se h√° transforma√ß√£o de data
  console.log('\nüîç PASSO 6 - Verifica√ß√£o de transforma√ß√£o:')
  console.log(`‚Ä¢ Data original: ${userSelectedDate}`)
  console.log(`‚Ä¢ Data no banco: ${billInsertData.due_date}`)
  console.log(`‚Ä¢ Houve transforma√ß√£o: ${userSelectedDate !== billInsertData.due_date ? 'SIM' : 'N√ÉO'}`)
  
  // Passo 7: Poss√≠veis problemas
  console.log('\n‚ö†Ô∏è  POSS√çVEIS PROBLEMAS:')
  console.log('1. Valor padr√£o do formul√°rio usando formatDateInput(new Date())')
  console.log('2. Timezone do servidor diferente do cliente')
  console.log('3. Supabase interpretando a data como UTC')
  console.log('4. Exibi√ß√£o da data com problema de fuso hor√°rio')
  
  // Passo 8: Teste com data atual
  console.log('\nüß™ TESTE COM DATA ATUAL:')
  const today = new Date()
  const todayFormatted = formatDateInput(today)
  console.log(`‚Ä¢ Hoje: ${today.toDateString()}`)
  console.log(`‚Ä¢ Formatado: ${todayFormatted}`)
  console.log(`‚Ä¢ ISO: ${today.toISOString().split('T')[0]}`)
  console.log(`‚Ä¢ Diferen√ßa: ${todayFormatted !== today.toISOString().split('T')[0] ? 'SIM' : 'N√ÉO'}`)
  
  console.log('\nüí° RECOMENDA√á√ïES:')
  console.log('1. Verificar se o problema est√° na exibi√ß√£o (frontend)')
  console.log('2. Verificar se o problema est√° no armazenamento (backend)')
  console.log('3. Testar com data espec√≠fica vs data atual')
  console.log('4. Verificar logs do Supabase')
}

debugBillCreation()
