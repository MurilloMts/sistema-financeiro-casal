const { createClient } = require('@supabase/supabase-js')

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://ygqjvvjqvqjvqjvqvqjv.supabase.co'
const supabaseKey = 'your-anon-key-here'
const supabase = createClient(supabaseUrl, supabaseKey)

// Fun√ß√£o corrigida de formata√ß√£o de data
function formatDateInput(date) {
  if (typeof date === 'string') {
    if (date.match(/^\d{4}-\d{2}-\d{2}$/)) {
      return date
    }
    const d = new Date(date + 'T12:00:00')
    const year = d.getFullYear()
    const month = String(d.getMonth() + 1).padStart(2, '0')
    const day = String(d.getDate()).padStart(2, '0')
    return `${year}-${month}-${day}`
  } else {
    // Para objetos Date, usar UTC para evitar problemas de fuso hor√°rio
    // mas ajustar para o meio-dia UTC para evitar mudan√ßas de data
    const utcDate = new Date(date.getTime() + (date.getTimezoneOffset() * 60000))
    const year = utcDate.getUTCFullYear()
    const month = String(utcDate.getUTCMonth() + 1).padStart(2, '0')
    const day = String(utcDate.getUTCDate()).padStart(2, '0')
    return `${year}-${month}-${day}`
  }
}

async function testBillsDateFormatting() {
  console.log('üß™ TESTE DE FORMATA√á√ÉO DE DATAS - CONTAS')
  console.log('=' .repeat(50))
  
  // Teste 1: Data espec√≠fica criada localmente
  const testDate = new Date(2025, 6, 25) // M√™s √© 0-indexado, ent√£o 6 = julho
  console.log(`üìÖ Data de teste: ${testDate.toISOString()}`)
  console.log(`‚ùå M√©todo antigo (toISOString): ${testDate.toISOString().split('T')[0]}`)
  console.log(`‚úÖ M√©todo novo (formatDateInput): ${formatDateInput(testDate)}`)
  
  // Teste 2: Data atual
  const now = new Date()
  console.log(`üìÖ Data atual: ${now.toISOString()}`)
  console.log(`‚úÖ Formatada: ${formatDateInput(now)}`)
  
  // Teste 3: String de data
  const dateString = '2025-07-25'
  console.log(`üìÖ String de data: ${dateString}`)
  console.log(`‚úÖ Resultado: ${formatDateInput(dateString)}`)
  
  // Teste 4: Compara√ß√£o com problema original
  const problematicDate = new Date('2025-07-25T00:00:00.000Z')
  console.log(`üìÖ Data problem√°tica (UTC): ${problematicDate.toISOString()}`)
  console.log(`‚ùå toISOString().split('T')[0]: ${problematicDate.toISOString().split('T')[0]}`)
  console.log(`‚úÖ formatDateInput: ${formatDateInput(problematicDate)}`)
  
  console.log('\nüí° CORRE√á√ïES APLICADAS:')
  console.log('‚Ä¢ useBills.ts: markAsPaid, getUpcomingBills, getOverdueBills, getBillsStats')
  console.log('‚Ä¢ useTransactions.ts: duplicateTransaction')
  console.log('‚Ä¢ useDashboard.ts: billsStats calculation')
  console.log('‚Ä¢ contas/page.tsx: duplicateBill function')
  console.log('‚Ä¢ Adicionada fun√ß√£o duplicateBill no hook useBills')
  
  console.log('\nüéØ PR√ìXIMOS PASSOS:')
  console.log('1. Teste criando uma nova conta com data espec√≠fica')
  console.log('2. Verifique se a data salva √© a mesma que voc√™ selecionou')
  console.log('3. Teste a duplica√ß√£o de contas')
  console.log('4. Verifique as contas pr√≥ximas do vencimento')
}

testBillsDateFormatting()