// Fun√ß√£o corrigida de formata√ß√£o de data
function formatDateInput(date) {
  if (typeof date === 'string') {
    if (date.match(/^\d{4}-\d{2}-\d{2}$/)) {
      return date
    }
    const d = new Date(date + 'T12:00:00')
    const year = d.getFullYear()
    const month = String(d.getMonth() + 1).padStart(2, '0')
    const day = String(d.getDate()).padStart(2, '0')
    return `${year}-${month}-${day}`
  } else {
    const utcDate = new Date(date.getTime() + (date.getTimezoneOffset() * 60000))
    const year = utcDate.getUTCFullYear()
    const month = String(utcDate.getUTCMonth() + 1).padStart(2, '0')
    const day = String(utcDate.getUTCDate()).padStart(2, '0')
    return `${year}-${month}-${day}`
  }
}

function testBillCreationDates() {
  console.log('üß™ TESTE DE CRIA√á√ÉO DE CONTAS - DATAS')
  console.log('=' .repeat(50))
  
  // Teste 1: Data atual (como no formul√°rio)
  const today = new Date()
  console.log('üìÖ TESTE 1 - Data atual:')
  console.log(`‚Ä¢ Data atual: ${today.toISOString()}`)
  console.log(`‚Ä¢ formatDateInput(new Date()): ${formatDateInput(today)}`)
  console.log(`‚Ä¢ Esperado: ${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`)
  
  // Teste 2: Data espec√≠fica selecionada pelo usu√°rio
  const selectedDate = '2025-08-15'
  console.log('\nüìÖ TESTE 2 - Data selecionada pelo usu√°rio:')
  console.log(`‚Ä¢ Data selecionada: ${selectedDate}`)
  console.log(`‚Ä¢ formatDateInput("${selectedDate}"): ${formatDateInput(selectedDate)}`)
  console.log(`‚Ä¢ Esperado: ${selectedDate}`)
  
  // Teste 3: Simular dados do formul√°rio
  const formData = {
    title: 'Conta de Teste',
    amount: 100.50,
    due_date: '2025-08-15',
    category_id: 'cat-1',
    notes: 'Teste de cria√ß√£o'
  }
  
  console.log('\nüìã TESTE 3 - Dados do formul√°rio:')
  console.log(`‚Ä¢ T√≠tulo: ${formData.title}`)
  console.log(`‚Ä¢ Valor: R$ ${formData.amount}`)
  console.log(`‚Ä¢ Data original: ${formData.due_date}`)
  console.log(`‚Ä¢ Data processada: ${formatDateInput(formData.due_date)}`)
  
  // Teste 4: Verificar se h√° diferen√ßa entre string e Date
  const dateAsString = '2025-08-15'
  const dateAsObject = new Date('2025-08-15T12:00:00')
  
  console.log('\nüîç TESTE 4 - Compara√ß√£o String vs Date:')
  console.log(`‚Ä¢ String "${dateAsString}": ${formatDateInput(dateAsString)}`)
  console.log(`‚Ä¢ Date object: ${formatDateInput(dateAsObject)}`)
  
  // Teste 5: Problema potencial - Date com UTC
  const problematicDate = new Date('2025-08-15')
  console.log('\n‚ö†Ô∏è  TESTE 5 - Data problem√°tica (UTC):')
  console.log(`‚Ä¢ new Date("2025-08-15"): ${problematicDate.toISOString()}`)
  console.log(`‚Ä¢ formatDateInput: ${formatDateInput(problematicDate)}`)
  console.log(`‚Ä¢ Problema: ${problematicDate.toISOString().split('T')[0] !== formatDateInput(problematicDate) ? 'SIM' : 'N√ÉO'}`)
  
  console.log('\nüí° DIAGN√ìSTICO:')
  console.log('‚Ä¢ Se o formul√°rio est√° enviando strings de data: ‚úÖ OK')
  console.log('‚Ä¢ Se o formul√°rio est√° enviando objetos Date: ‚ö†Ô∏è  Pode ter problema')
  console.log('‚Ä¢ Verifique se o input type="date" retorna string ou Date')
  
  console.log('\nüîß PR√ìXIMOS PASSOS:')
  console.log('1. Verificar se o problema est√° no valor padr√£o do formul√°rio')
  console.log('2. Verificar se o input date est√° retornando string ou Date')
  console.log('3. Garantir que due_date seja sempre uma string YYYY-MM-DD')
}

testBillCreationDates()
